<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[QT框架下C++调用matlab混合编程]]></title>
    <url>%2F2019%2F03%2F31%2FQT%E6%A1%86%E6%9E%B6%E4%B8%8BC%2B%2B%E8%B0%83%E7%94%A8matlab%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[在visual studio下调用MATLAB程序比较简单，但是在QT框架下用C++调用matlab复杂许多，网上诸多博客不够具体详细，这里结合我的实际过程以及相关博客，给读者分享一下QT调用MATLAB程序进行混合编程的基本流程。 编译DLL文件作为例子，我先编写了一个简单的相加函数add_matlab.m，代码如下： 123function [p]=add_matlab(a,b)p=a+b;end 保存之后，开始编译成DLL文件。 注意： 要想成功编译成DLL文件，首先你的MATLAB得是成功破解的版本，否则会出现报错:Test checkout of feature &#39;Compiler&#39; failed。 需要配置MATLAB编译环境，在MATLAB命令行窗口下输入mbuild -setup,如下图： 点击C++的选项进行安装。如果未出现上述信息，而是显示未找到支持的编译器或SDK，则需要安装对应的编译器，要注意MATLAB安装的编译器必须和你的QT的编译器一个类型，绝对不要QT是MinGW编译器，而MATLAB是MSVC编译器，一定要一致。 安装编译器后在命令行窗口中输入mex -setup C++ ,如果没有报错即安装成功。 在命令行输入deploytool,如下图： 选择Library Compile，如下图： 在TYPE栏选择C++ shared Library，在EXPORTED FUNCTIONS添加要编译的.m文件，本文以上述所写的add_matlab.m为例，点击右上角绿色的Package，即可产生DLL文件，文件夹如下图： for_testing 目录下是用于测试的，但是dll不是可执行文件，不能直接进行进行测试。 for_redistribution目录下是文件MyAppInstaller_web.exe，这个是MATLAB运行时库的和本项目的安装文件，运行后可从网上下载MATLAB的运行时库进行安装，还会安装本项目生成的DLL、LIB和h文件。 此处我们选择第二个文件夹，我们将要使用的是其中的.h、.lib、.dll文件。 QT调用add_matlab.dll首先我们创建一个QtWidget Application项目test_dll，界面如下 实现从文本框输入两个数值之后，qdebug出相加的结果。 添加.lib库在项目目录下新建一个include目录，将前面编译生成的add_matlab\for_redistribution_files_only目录下的add_matlab.lib和add_matlab.h、add_matlab.dll文件复制到此目录下。 在Qt Creator里，项目节点上单击右键，选择“Add Library...”，在出现的向导中首先选择“External Library”，后续出现下图的界面，选择库test_dll\include\目录下的库文件add_matlab.Lib，其他选择如图。 在此对话框完成后，在test_dll.pro文件中会增加如下的几行： 1234win32: LIBS += -L$$PWD/include/ -ladd_matlabINCLUDEPATH += $$PWD/includeDEPENDPATH += $$PWD/include 添加Matlab其他依赖库和头文件搜索路径除了自己编译生成的DLL相关的.lib文件和头文件，要编译此Qt项目，还需要用到MATLAB的几个.lib文件和.h文件。 1234567891011121314# 用到的MATLAB 的.lib库文件 及其搜索路径win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmxwin32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmatwin32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibengwin32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -lmclmcrwin32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -lmclmcrrtwin32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmexINCLUDEPATH += C:/Matlab/v94/extern/lib/win64/microsoftDEPENDPATH += C:/Matlab/v94/extern/lib/win64/microsoft# .h文件搜索路径INCLUDEPATH += C:/MATLAB/v94/extern/includeINCLUDEPATH += C:/MATLAB/v94/extern/include/win64 此处路径为MATLAB安装路径，按照你的安装路径相应修改，要注意MATLAB安装路径不要带有空格（如Program Files），否则会被视为两行。 add_matlab.dll文件要复制到项目编译后的debug目录下。 QT编译将add_matlab.h文件添加进项目中，并且在MainWidget.h文件中引用，随后使用add_matlab函数代码，如下图： add_matlabInitialize()为初始化函数，一定要记得添加。 QT中使用mwArray类型数组作为MATLAB编译函数的输入输出数据接口， 1mwArray matrixA(rowCnt,colCnt,mxDOUBLE_CLASS, mxREAL); 此外add_matlab函数第一个参数int nargout是输出参数个数，表示后面紧跟着的nargout个变量是输出参数 1extern LIB_add_matlab_CPP_API void MW_CALL_CONV add_matlab(int nargout, mwArray&amp; C, const mwArray&amp; A, const mwArray&amp; B); 编译运行之后，结果如下图：]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
        <tag>C++</tag>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Next主题配置]]></title>
    <url>%2F2019%2F03%2F30%2FHexo-Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1、 站点配置文件_config.yml站点配置文件_config.yml是在你博客保存目录的根目录下，注意将它与主题配置文件进行区分，例如我保存的博客目录为F:\myblog，那么我站点配置文件为F:\myblog\ _config.yml，我使用的主题是Next主题，所以我的主题配置文件为F:\myblog\themes\next\ _config.yml。 你可以在 _config.yml 中修改大部分的配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含你网站的关键词。author参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的永久链接格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 如果你的网站存放在子目录中，例如 http://yoursite.com/blog，则请将你的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 未完待续。。。。。。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github Page搭建个人博客]]></title>
    <url>%2F2019%2F03%2F30%2FHexo-Github-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[之前看到很多人搭建自己的博客，而不是依托于CSDN、博客园等站点，因此课后之余，花了点时间搭建了本博客，期间遇到了很多问题，现在再此写下了具体的搭建过程以及遇到的麻烦和具体的解决办法，希望对读者有所帮助。 1、Hexo1.1 Hexo简介Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 1.2 安装前提安装Hexo前需要安装Node.js和Git。 安装Git Windows：下载并安装 git. Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 注意：初次安装git需要配置用户名和邮箱，否则git会提示：please tell me who you are. 1234&gt; $ git config --global user.name &quot;Your name&quot;&gt; &gt; $ git config --global user.email &quot;Your email&quot;&gt; 此外，初次使用git的用户要使用git协议大概需要三个步骤： 一、生成密钥对 12&gt; $ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;&gt; 二、设置远程仓库（本文以github为例）上的公钥 12345&gt; 1.查看生成的公钥: $ cat ~/.ssh/id_rsa.pub &gt; 2.随后登陆你的GitHub账户，Setting-&gt;左栏点击SSH and GPG keys-&gt;New SSH key&gt; 3.复制上面所查看的公钥，粘贴进key文本域，点击Add key&gt; 4.验证是否起作用: $ ssh -T git@github.com &gt; 三、把git的 remote url 修改为git协议 12&gt; $ git remote set-url origin git@github.com:someaccount/someproject.git&gt; 安装Node.js对于windows用户来说，建议使用 安装程序 进行安装。安装时，请勾选Add to PATH选项。 1.3 安装Hexo所有必备的应用程序安装完成后，即可使用 npm安装 Hexo。 1$ npm install -g hexo-cli 该命令行在Git Bash 上使用，打开它的方法很简单，在桌面或者文件夹任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，读者可以考虑始终使用Git Bash来进行操作。 2、搭建博客2.1 初始化安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 当然你也可以自己新建一个目录，比如我在F盘中创建了myblog目录，进入目录中点击右键选择Git Bash Here，直接执行以下命令 12$ hexo init $ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 2.2 启动服务器执行以下命令来启动服务： 12$ hexo g #hexo generate，生成静态文件$ hexo s #hexo server，启动本地服务器 如果启动过程中没有报错，此时你用浏览器访问http://localhost:4000/，就可以看到一个空白的博客页面，hexo3.0使用的默认主题是landscape，此时的服务是本地启动的，别人并不能看到。 2.3 Github配置想要别人也访问到你的页面，跟着继续吧。首先在Github官网上注册一个账号，有账号的跳过注册，直接登录。登录后找到new repository按钮创建一个新的仓库, 要注意必须创建与你的Github用户名相对应的Github Page仓库，格式必须是username.github.io。 2.3 建立关联进入你刚创建的仓库，复制仓库的地址 ,然后打开hexo文件夹下的_config.yml文件，拉倒最下面，修改deploy为以下代码，在repository后面粘贴你的仓库地址： 1234deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 输入以下命令部署到Github Page 123$ hexo clean$ hexo g$ hexo d 然后在浏览器输入username.github.io就可以看到你的博客啦。 之后每次更改你的_post目录下的博客文章，都需要输入上述命令来部署到Github Page。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github page</tag>
      </tags>
  </entry>
</search>
