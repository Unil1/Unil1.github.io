<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QT框架下C++调用matlab混合编程</title>
      <link href="/QT%E6%A1%86%E6%9E%B6%E4%B8%8BC++%E8%B0%83%E7%94%A8matlab%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B.html"/>
      <url>/QT%E6%A1%86%E6%9E%B6%E4%B8%8BC++%E8%B0%83%E7%94%A8matlab%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<p>在<code>visual studio</code>下调用<code>MATLAB</code>程序比较简单，但是在<code>QT</code>框架下用<code>C++</code>调用<code>matlab</code>复杂许多，网上诸多博客不够具体详细，这里结合我的实际过程以及相关博客，给读者分享一下<code>QT</code>调用<code>MATLAB</code>程序进行混合编程的基本流程。</p><a id="more"></a><h2 id="编译DLL文件"><a href="#编译DLL文件" class="headerlink" title="编译DLL文件"></a>编译DLL文件</h2><p>作为例子，我先编写了一个简单的相加函数<code>add_matlab.m</code>，代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[p]</span>=<span class="title">add_matlab</span><span class="params">(a,b)</span></span></span><br><span class="line">p=a+b;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>保存之后，开始编译成<code>DLL</code>文件。</p><p><strong>注意</strong>：</p><ul><li><p>要想成功编译成<code>DLL</code>文件，首先你的<code>MATLAB</code>得是成功破解的版本，否则会出现报错:<code>Test checkout of feature &#39;Compiler&#39; failed</code>。</p></li><li><p>需要配置<code>MATLAB</code>编译环境，在<code>MATLAB</code>命令行窗口下输入<code>mbuild -setup</code>,如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图1.bmp" alt=""></p><p>点击<code>C++</code>的选项进行安装。如果未出现上述信息，而是显示未找到支持的编译器或<code>SDK</code>，则需要安装对应的编译器，要注意<code>MATLAB</code>安装的编译器必须和你的<code>QT</code>的编译器一个类型，绝对不要<code>QT</code>是<code>MinGW</code>编译器，而<code>MATLAB</code>是<code>MSVC</code>编译器，一定要一致。</p><p>安装编译器后在命令行窗口中输入<code>mex -setup C++</code> ,如果没有报错即安装成功。</p></li></ul><p>在命令行输入<code>deploytool</code>,如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图2.bmp" alt=""></p><p>选择<code>Library Compile</code>，如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图3.bmp" alt=""></p><p>在<code>TYPE</code>栏选择<code>C++ shared Library</code>，在<code>EXPORTED FUNCTIONS</code>添加要编译的<code>.m</code>文件，本文以上述所写的<code>add_matlab.m</code>为例，点击右上角绿色的<code>Package</code>，即可产生<code>DLL</code>文件，文件夹如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图4.bmp" alt=""></p><p><code>for_testing</code> 目录下是用于测试的，但是<code>dll</code>不是可执行文件，不能直接进行进行测试。</p><p><code>for_redistribution</code>目录下是文件<code>MyAppInstaller_web.exe</code>，这个是<code>MATLAB</code>运行时库的和本项目的安装文件，运行后可从网上下载<code>MATLAB</code>的运行时库进行安装，还会安装本项目生成的<code>DLL</code>、<code>LIB</code>和<code>h</code>文件。</p><p>此处我们选择第二个文件夹，我们将要使用的是其中的<code>.h</code>、<code>.lib</code>、<code>.dll</code>文件。</p><p><img src="/QT框架下C++调用matlab混合编程/图5.bmp" alt=""></p><h2 id="QT调用add-matlab-dll"><a href="#QT调用add-matlab-dll" class="headerlink" title="QT调用add_matlab.dll"></a>QT调用<code>add_matlab.dll</code></h2><p>首先我们创建一个<code>QtWidget Application</code>项目<code>test_dll</code>，界面如下</p><p><img src="/QT框架下C++调用matlab混合编程/图6.bmp" alt=""></p><p>实现从文本框输入两个数值之后，<code>qdebug</code>出相加的结果。</p><h5 id="添加-lib库"><a href="#添加-lib库" class="headerlink" title="添加.lib库"></a>添加.lib库</h5><p>在项目目录下新建一个<code>include</code>目录，将前面编译生成的<code>add_matlab\for_redistribution_files_only</code>目录下的<code>add_matlab.lib</code>和<code>add_matlab.h</code>、<code>add_matlab.dll</code>文件复制到此目录下。</p><p>在<code>Qt Creator</code>里，项目节点上单击右键，选择<code>“Add Library...”</code>，在出现的向导中首先选择<code>“External Library”</code>，后续出现下图的界面，选择库<code>test_dll\include\</code>目录下的库文件<code>add_matlab.Lib</code>，其他选择如图。</p><p><img src="/QT框架下C++调用matlab混合编程/图10.bmp" alt=""></p><p>在此对话框完成后，在<code>test_dll.pro</code>文件中会增加如下的几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">win32: LIBS += -L$$PWD/include/ -ladd_matlab</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/include</span><br><span class="line">DEPENDPATH += $$PWD/include</span><br></pre></td></tr></table></figure><h5 id="添加Matlab其他依赖库和头文件搜索路径"><a href="#添加Matlab其他依赖库和头文件搜索路径" class="headerlink" title="添加Matlab其他依赖库和头文件搜索路径"></a><strong>添加<code>Matlab</code>其他依赖库和头文件搜索路径</strong></h5><p>除了自己编译生成的<code>DLL</code>相关的<code>.lib</code>文件和头文件，要编译此<code>Qt</code>项目，还需要用到<code>MATLAB</code>的几个<code>.lib</code>文件和<code>.h</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 用到的MATLAB 的.lib库文件 及其搜索路径</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmx</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmat</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibeng</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -lmclmcr</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -lmclmcrrt</span><br><span class="line">win32: LIBS += -LC:/Matlab/v94/extern/lib/win64/microsoft/ -llibmex</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += C:/Matlab/v94/extern/lib/win64/microsoft</span><br><span class="line">DEPENDPATH += C:/Matlab/v94/extern/lib/win64/microsoft</span><br><span class="line"></span><br><span class="line"># .h文件搜索路径</span><br><span class="line">INCLUDEPATH += C:/MATLAB/v94/extern/include</span><br><span class="line">INCLUDEPATH += C:/MATLAB/v94/extern/include/win64</span><br></pre></td></tr></table></figure><p>此处路径为<code>MATLAB</code>安装路径，按照你的安装路径相应修改，<strong>要注意<code>MATLAB</code>安装路径不要带有空格（如<code>Program Files</code>），否则会被视为两行</strong>。</p><p><strong><code>add_matlab.dll</code>文件要复制到项目编译后的<code>debug</code>目录下。</strong></p><h5 id="QT编译"><a href="#QT编译" class="headerlink" title="QT编译"></a>QT编译</h5><p>将<code>add_matlab.h</code>文件添加进项目中，并且在<code>MainWidget.h</code>文件中引用，随后使用<code>add_matlab</code>函数代码，如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图9.bmp" alt=""></p><p><code>add_matlabInitialize()</code>为初始化函数，一定要记得添加。</p><p><code>QT</code>中使用<code>mwArray</code>类型数组作为<code>MATLAB</code>编译函数的输入输出数据接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mwArray matrixA(rowCnt,colCnt,mxDOUBLE_CLASS, mxREAL);</span><br></pre></td></tr></table></figure><p>此外<code>add_matlab</code>函数第一个参数<code>int  nargout</code>是输出参数个数，表示后面紧跟着的<code>nargout</code>个变量是输出参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern LIB_add_matlab_CPP_API void MW_CALL_CONV add_matlab(int nargout, mwArray&amp; C, const mwArray&amp; A, const mwArray&amp; B);</span><br></pre></td></tr></table></figure><p>编译运行之后，结果如下图：</p><p><img src="/QT框架下C++调用matlab混合编程/图7.bmp" alt=""></p><p><img src="/QT框架下C++调用matlab混合编程/图8.bmp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Next主题配置</title>
      <link href="/Hexo-Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html"/>
      <url>/Hexo-Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1、-站点配置文件-config-yml"><a href="#1、-站点配置文件-config-yml" class="headerlink" title="1、 站点配置文件_config.yml"></a>1、 站点配置文件_config.yml</h2><p>站点配置文件<code>_config.yml</code>是在你博客保存目录的根目录下，注意将它与<strong>主题配置文件</strong>进行区分，例如我保存的博客目录为F:\myblog，那么我站点配置文件为F:\myblog\ _config.yml，我使用的主题是Next主题，所以我的主题配置文件为F:\myblog\themes\next\ _config.yml。</p><p>你可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h5 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含你网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h5 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h5><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的永久链接格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>如果你的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将你的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p><p>未完待续。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github Page搭建个人博客</title>
      <link href="/Hexo-Github-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
      <url>/Hexo-Github-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<p>之前看到很多人搭建自己的博客，而不是依托于CSDN、博客园等站点，因此课后之余，花了点时间搭建了本博客，期间遇到了很多问题，现在再此写下了具体的搭建过程以及遇到的麻烦和具体的解决办法，希望对读者有所帮助。</p><a id="more"></a><h2 id="1、Hexo"><a href="#1、Hexo" class="headerlink" title="1、Hexo"></a>1、Hexo</h2><h3 id="1-1-Hexo简介"><a href="#1-1-Hexo简介" class="headerlink" title="1.1 Hexo简介"></a>1.1 Hexo简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-2-安装前提"><a href="#1-2-安装前提" class="headerlink" title="1.2 安装前提"></a>1.2 安装前提</h3><p>安装Hexo前需要安装Node.js和Git。</p><blockquote><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ul><li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p><p>注意：初次安装git需要配置用户名和邮箱，否则git会提示：please tell me who you are.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   $ git config --global user.name &quot;Your name&quot;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   $ git config --global user.email &quot;Your email&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>  此外，初次使用git的用户要使用git协议大概需要三个步骤：</p><p>  一、生成密钥对</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   $ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>  二、设置远程仓库（本文以github为例）上的公钥</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   1.查看生成的公钥: $ cat ~/.ssh/id_rsa.pub   </span><br><span class="line">&gt;   2.随后登陆你的GitHub账户，Setting-&gt;左栏点击SSH and GPG keys-&gt;New SSH key</span><br><span class="line">&gt;   3.复制上面所查看的公钥，粘贴进key文本域，点击Add key</span><br><span class="line">&gt;   4.验证是否起作用: $ ssh -T git@github.com</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>  三、把git的 remote url 修改为git协议</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   $ git remote set-url origin git@github.com:someaccount/someproject.git</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><hr><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>对于windows用户来说，建议使用 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。 </p></blockquote><h3 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 <code>npm</code>安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>该命令行在Git Bash 上使用，打开它的方法很简单，在桌面或者文件夹任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，读者可以考虑始终使用Git Bash来进行操作。</p><h2 id="2、搭建博客"><a href="#2、搭建博客" class="headerlink" title="2、搭建博客"></a>2、搭建博客</h2><h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>当然你也可以自己新建一个目录，比如我在F盘中创建了myblog目录，进入目录中点击右键选择Git Bash Here，直接执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init </span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="2-2-启动服务器"><a href="#2-2-启动服务器" class="headerlink" title="2.2 启动服务器"></a>2.2 启动服务器</h3><p>执行以下命令来启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g #hexo generate，生成静态文件</span><br><span class="line">$ hexo s #hexo server，启动本地服务器</span><br></pre></td></tr></table></figure><p>如果启动过程中没有报错，此时你用浏览器访问<a href="http://localhost:4000/，就可以看到一个空白的博客页面，hexo3.0使用的默认主题是landscape，此时的服务是本地启动的，别人并不能看到。" target="_blank" rel="noopener">http://localhost:4000/，就可以看到一个空白的博客页面，hexo3.0使用的默认主题是landscape，此时的服务是本地启动的，别人并不能看到。</a></p><h3 id="2-3-Github配置"><a href="#2-3-Github配置" class="headerlink" title="2.3 Github配置"></a>2.3 Github配置</h3><p>想要别人也访问到你的页面，跟着继续吧。首先在Github官网上注册一个账号，有账号的跳过注册，直接登录。登录后找到<code>new repository</code>按钮创建一个新的仓库, 要注意必须创建与你的Github用户名相对应的Github Page仓库，格式必须是username.github.io。 </p><h3 id="2-3-建立关联"><a href="#2-3-建立关联" class="headerlink" title="2.3 建立关联"></a>2.3 建立关联</h3><p>进入你刚创建的仓库，复制仓库的地址 ,然后打开hexo文件夹下的_config.yml文件，拉倒最下面，修改deploy为以下代码，在repository后面粘贴你的仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">    type: git</span><br><span class="line">    repository:  git@github.com:username/username.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>输入以下命令部署到Github Page</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>然后在浏览器输入<code>username.github.io</code>就可以看到你的博客啦。</p><p>之后每次更改你的<code>_post</code>目录下的博客文章，都需要输入上述命令来部署到Github Page。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github page </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
